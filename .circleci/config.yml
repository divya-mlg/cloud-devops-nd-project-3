version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "Destroying environment: << parameters.workflow_id >>"
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -sk https://kvdb.io/CgMyGtBLcMBMB6TVxrZq8L/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              # Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi
  print_inventory_file:
    description: Print ansible inventory file
    steps:
      - run:
          cat .circleci/ansible/inventory.txt
jobs:
  build-frontend:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend-unit-tests
          command: |
            cd frontend
            npm install
            npm run test    
  
  test-backend:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-unit-tests
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend-audit
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            #npm audit fix
            #npm audit --audit-level=critical

  scan-backend:
    docker:
      - image:  circleci/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-audit
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            #npm audit fix
            #npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output=text >> .circleci/ansible/inventory.txt
      - print_inventory_file
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: f0:88:5e:44:07:f3:ca:b5:f1:82:ae:b0:e7:11:48:18
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: print inventory.txt
          command: |
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            #npm cache clean -f
            npm install
            #npm audit fix --force
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -sk https://kvdb.io/CgMyGtBLcMBMB6TVxrZq8L/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d "1"
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y python3
            sudo apt install -y ansible
            sudo apt install -y awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output=text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" > frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -cvzf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure      
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: f0:88:5e:44:07:f3:ca:b5:f1:82:ae:b0:e7:11:48:18
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
            apk add --update tar gzip
            apk add --update nodejs npm
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -cvzf artifact.tar.gz .
            cd .circleci/ansible
            echo "displaying inventory file"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update nodejs npm curl
            apk add --update python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output=text)
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output=text)
            echo "BACKEND_IP=${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi            
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fail
              #return 1
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip curl
      - run:
          name: Get OldWorkflowID before updating
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --output=text)
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo ${OldWorkflowID} > OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml \
              --stack-name project3-initial-stack --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkflowID.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            #export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --output=text)
            export OldWorkflowID=$(cat OldWorkflowID.txt)
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output=text)
            echo "stack names: ${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            #if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            echo "------OldWorkflowID=${OldWorkflowID}"
            export OldWorkflowID=$(cat OldWorkflowID.txt)
            echo "------OldWorkflowID=${OldWorkflowID}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              # your code here
              echo "---------Delete Confirmed------------"
              aws s3 rm "s3://${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          #requires: [test-frontend, test-backend]
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]          
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]          
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
